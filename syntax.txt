# Nexus is case iNsenSItIVe



# variables - type declaration required, but can also be "any"
@var bar:int = 0;     #immutable type... val can change
@bar = 5;             #change/assign value
@var bar2:any = 5;    #mutable type of "any"... val can change
@bar2 = "now a string"
@var aString:any = "  #multi-line strings are allowed
  Some content
  and some more
";
@var bar3:any;        #don't need to assign a value immediately



# f-strings
@var exclaim = '!!'
@var appendStr = f', such as this one@exclaim()'
@var fStr = f"F-strings can accept expressions in them@appendStr()"

# f-strings (functional/formatted strings) allows for additional Nexus code to be written inline
# strings with quotes " or apos ' can be used for f-strings



# escape strings delims
# An apos ' is used in this string but doesn't end the string since it is escaped using \
@var escaped = 'Introducing talibytes\' web-dev language: Nexus!'



# calculate an expression ... NEEDS MORE WORK
@calc(5+5)                    #returns 10
@var bar2:int = 5+5           # because "+" isn't a number, an error is raised
@var bar4:int = @calc(5+5)    # because @calc(5+5) returns 10, the value of bar4 would be set to 10



@const pi:float = 3.14;   #immutable type and val... type REQUIRED
@pi.kill()                #.kill method removes variable entirely



# accepts ints or floats, returns none (ie return type = none)
@def add (num1:int:float, num2:int:float):none {
  @print(@calc(@num1 + @num2));
}
@add(@bar, @bar2);  #10



# accepts only ints
@def sub (num1:int:, num2:int):none {
  @print(@calc(@num1 - @num2))
}
@sub(@bar, @bar2); #0


# DEMONSTRATE VARIABLE SCOPING, GLOBAL, NONLOCAL, ETC


# function only allowd to return floats or ints
@def divide(num1:int:float, num2:int:float):int:float {
  @return()
}

@mul(@bar, @bar2, DISABLE);       #returns nothing
@mul(@bar, @bar2, disable=1)      #is disabled
@mul(@bar, @bar2, disable=0)      #not disabled
@mul(@bar, @bar2, NOINTERPRET);   #returns this literal string of code
@def foo(NOINTERPRET, DISABLED){
  # without disabled would return entire node... disabled takes precedence here
}



# conditionals
@tern(condition, return value if true, return value if false)       #ternary operator

@if(condition) {        #execute block if condition is true

}

@switch(expression){    #do something when expression evals to x or y etc
  @when('val1'){
    #do something when expression returns 'val1'
  }
  @else(){
    #catch all
  }
}


@response_header('statusMessage', 'GOOD');
@response_header('custom1', 'Goodnight Sky!');


# NOT YET ADDED OPERATORS
/*
abs     absolute val
trunc   truncate float to int
floor   round float down to int
ceil    round float up to int
cos
sin
tan
acos
asin
atan
exp   exponentiation of e (exp(10) = e^10) ??should I keep?
nlog  natural log
log   log of
*/






# SEE WHICH TOKENS AREN'T REP'd IN THIS TEST FILES
# INTEGRITY CHECKING!

# SLEEPING/WAITING
# ASYNC
# AFTER RESPONSE SCRIPT (DEFER)

# private, public, protected class variables, methods
# .asint, etc
# error handling, try, catch, throw, finally/always

# enum?
# loops

# methods like .type, .add, etc
# .getMethods to return available methods for the type

# how to handle multiple libs/modules/global scoping?

/*
NEED TO CREATE VSCODE SYNTAX HIGHLIGHT EXTENSION
*/
