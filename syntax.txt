# NOTE: THIS FILE IS INTENDED AS A SUPPORT WHILE WRITING THE LANGUAGE
# IT IS NOT INTENDED TO BE A CONVENTIONS LIST AND WILL CHANGE OVER TIME

# Please see README_nexus_convention for additional information on name and writing conventions.

# variables - type declaration required, but can also be "any"
@var bar:int;         #declare a variable of int type (type always required, regardless of assigning/reassigning val or not)
@var bar:int = 0;     #assign a type and value to variable (and declare it if it doesn't exist)
@var bar:any = 5;     #reassign a new type and value to variable (val and types are mutable)
@var aString:any = "  #multi-line strings are allowed
  Some content
  and some more
";



# f-strings
@var exclaim:str = '!!'
@var appendStr:str = f', such as this one@exclaim()'
@var fStr:str = f"F-strings can accept expressions in them@appendStr()"

# f-strings (functional/formatted strings) allows for additional Nexus code to be written inline
# strings with quotes " or apos ' can be used for f-strings



# escape strings delims
# An apos ' is used in this string but doesn't end the string since it is escaped using \
@var escaped:str = 'Introducing realasira\' web-dev language: Nexus!'



# calculate an expression ... NEEDS MORE WORK
@calc(5+5)                    #returns 10
@var bar2:int = 5+5           # because "+" isn't a number, an error is raised
@var bar4:int = @calc(5+5)    # because @calc(5+5) returns 10, the value of bar4 would be set to 10



@const pi:float = 3.14;   #immutable type and val... type REQUIRED
@pi.kill()                #.kill method removes variable entirely



# accepts ints or floats, returns none (ie return type = none)
@def add (num1:int:float, num2:int:float):none {
  @print(@calc(@num1 + @num2));
}
@add(@bar, @bar2);  #10

# OR DOES THE FOLLOWING DEF SYNTAX MAKE MORE SENSE??
# the diff being return type declaration position
@def add:none (num1:float, num2:int:float) {
  ...
}



# accepts only ints
@def sub (num1:int:, num2:int):none {
  @print(@calc(@num1 - @num2))
}
@sub(@bar, @bar2); #0


# DEMONSTRATE VARIABLE SCOPING, GLOBAL, NONLOCAL, ETC


# function only allowd to return floats or ints
@def divide(num1:int:float, num2:int:float):int:float {
  @return()
}

@mul(@bar, @bar2, DISABLE);       #returns nothing
@mul(@bar, @bar2, disable=1)      #is disabled
@mul(@bar, @bar2, disable=0)      #not disabled
@mul(@bar, @bar2, NOINTERPRET);   #returns this literal string of code
@def foo(NOINTERPRET, DISABLED){
  # without disabled would return entire node... disabled takes precedence here
}



# conditionals
@tern(condition, return value if true, return value if false)       #ternary operator

@if(condition) {        #execute block if condition is true

}

@switch(expression){    #do something when expression evals to x or y etc
  @when('val1'){
    #do something when expression returns 'val1'
  }
  @else(){
    #catch all
  }
}


@response_header('statusMessage', 'GOOD');
@response_header('custom1', 'Goodnight Sky!');


# NOT YET ADDED OPERATORS
# abs     absolute val
# trunc   truncate float to int
# floor   round float down to int
# ceil    round float up to int
# cos
# sin
# tan
# acos
# asin
# atan
# exp   exponentiation of e (exp(10) = e^10) ??should I keep?
# nlog  natural log
# log   log of







# SEE WHICH TOKENS AREN'T REP'd IN THIS TEST FILES
# INTEGRITY CHECKING!

# SLEEPING/WAITING
# ASYNC
# AFTER RESPONSE SCRIPT (DEFER)

# private, public, protected class variables, methods
# .asint, etc
# error handling, try, catch, throw, finally/always

# enum?
# loops

# methods like .type, .add, etc
# .getMethods to return available methods for the type

# how to handle multiple libs/modules/global scoping?


# NEED TO CREATE VSCODE SYNTAX HIGHLIGHT EXTENSION





Nexus Types & Associated Methods:

# ChatGPT was given the following list of types and asked to generate a list of applicable methods for them
# The list has not been reviewed and is not finalized

any       .alt(), .asBool(), .asBoolean(), .asFloat(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asValue(), .copy(), .is(), .isBlank(), .isEqual(), .isNot(), .isNotEqual(), .isNull(), .isNumber(), .nullifblank(), .saveToFile(), .set(), .setValue(), .type(), .with(), .whenNull(), .whenBlank(), .alt(), .isTrue(), .isFalse()
blank     .isBlank()
null      .isNull()
str       .append(), .asBase64(), .asBool(), .asBoolean(), .asDate(), .asFloat(), .asHex(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asUTF8(), .asValue(), .asSQLString(), .asc(), .charIndex(), .contains(), .decode(), .encode(), .is(), .isBlank(), .isEqual(), .isNot(), .isNotEqual(), .length(), .lower(), .prepend(), .replace(), .textBetween(), .trim(), .type(), .URIEncode(), .URLEncode(), .URLDecode(), .with(), .copy(), .saveToFile()

list      .append(), .contains(), .is(), .isEqual(), .isNot(), .isNotEqual(), .length(), .prepend(), .type(), .with(), .copy(), .saveToFile()
dict      .contains(), .is(), .isEqual(), .isNot(), .isNotEqual(), .key(), .length(), .set(), .setValue(), .type(), .with(), .copy(), .saveToFile()
ref       .address(), .hide(), .is(), .isEqual(), .isNot(), .isNotEqual(), .nodeID(), .set(), .setValue(), .type(), .with(), .copy(), .saveToFile()
json
xml

def

bool      .is(), .isEqual(), .isNot(), .isNotEqual(), .type(), .with(), .copy(), .saveToFile()
datetime  .add(), .asDate(), .asSQLDate(), .between(), .formatDate(), .is(), .isBetween(), .isEqual(), .isGreaterThan(), .isLessThan(), .isNot(), .isNotEqual(), .sub(), .type(), .with(), .copy(), .saveToFile()
number    .absolute(), .add(), .asBool(), .asBoolean(), .asFloat(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asValue(), .atLeast(), .atMost(), .between(), .dec(), .formatNumber(), .inc(), .is(), .isBetween(), .isEqual(), .isGreatAs(), .isGreaterThan(), .isLessAs(), .isLessThan(), .isNot(), .isNotEqual(), .isNumber(), .mod(), .sub(), .type(), .with(), @trunc(), .copy(), .saveToFile()
int       .absolute(), .add(), .asBool(), .asBoolean(), .asFloat(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asValue(), .atLeast(), .atMost(), .between(), .dec(), .formatNumber(), .inc(), .is(), .isBetween(), .isEqual(), .isGreatAs(), .isGreaterThan(), .isLessAs(), .isLessThan(), .isNot(), .isNotEqual(), .isNumber(), .mod(), .sub(), .type(), .with(), @trunc(), .isEven(), .isOdd(), .copy(), .saveToFile()
float     .absolute(), .add(), .asBool(), .asBoolean(), .asFloat(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asValue(), .atLeast(), .atMost(), .between(), .dec(), .formatNumber(), .inc(), .is(), .isBetween(), .isEqual(), .isGreatAs(), .isGreaterThan(), .isLessAs(), .isLessThan(), .isNot(), .isNotEqual(), .isNumber(), .mod(), .sub(), .type(), .with(), @trunc(), .copy(), .saveToFile()
double    .absolute(), .add(), .asBool(), .asBoolean(), .asFloat(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asValue(), .atLeast(), .atMost(), .between(), .dec(), .formatNumber(), .inc(), .is(), .isBetween(), .isEqual(), .isGreatAs(), .isGreaterThan(), .isLessAs(), .isLessThan(), .isNot(), .isNotEqual(), .isNumber(), .mod(), .sub(), .type(), .with(), @trunc(), .copy(), .saveToFile()
money     .absolute(), .add(), .asBool(), .asBoolean(), .asFloat(), .asInt(), .asInteger(), .asMoney(), .asNumber(), .asString(), .asValue(), .atLeast(), .atMost(), .between(), .dec(), .formatNumber(), .inc(), .is(), .isBetween(), .isEqual(), .isGreatAs(), .isGreaterThan(), .isLessAs(), .isLessThan(), .isNot(), .isNotEqual(), .isNumber(), .mod(), .sub(), .type(), .with(), @trunc(), .asSQLMoney(), .copy(), .saveToFile()

base64    .is(), .isEqual(), .isNot(), .isNotEqual(), .length(), .type(), .with(), .copy(), .saveToFile()
binary    .asBase64(), .asHex(), .asUTF8(), .contentType(), .decode(), .encode(), .is(), .isEqual(), .isNot(), .isNotEqual(), .length(), .type(), .with(), .copy(), .saveToFile()
hex       .is(), .isEqual(), .isNot(), .isNotEqual(), .length(), .type(), .with(), .copy(), .saveToFile()
utf8      .asBase64(), .contentType(), .decode(), .encode(), .is(), .isEqual(), .isNot(), .isNotEqual(), .length(), .type(), .with(), .copy(), .saveToFile()
